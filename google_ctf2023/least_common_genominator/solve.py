from Crypto.PublicKey import RSA
from Crypto.Util.number import bytes_to_long, inverse, long_to_bytes

def decrypt_flag():
    n = 71674664423832062362225645286431872612582245915905977239323252746461907322381252637907953774805519594861899254707764208648266661014697480148017031274120072016822681552361111985809836517346299295178094867969729986999298220667046370085987705520713258375124298679838310858180617696385464655405844139668902087293639
    e = 65537
    d = 1600789255460746943995306281618847788452192608345559749989848221032647067764172687061802571223768834338547921103725031724996984788627246547562510280374607691442451083191222920314133872338029869875169897171598395451116663404774099936852958888566228705404871736731300920983349727452722973051904820099597793

    p = 2166771675595184069339107365908377157701164485820981409993925279512199123418374034275465590004848135946671454084220731645099286746251308323653144363063385
    q = 6729272950467625456298454678219613090467254824679318993052294587570153424935267364971827277137521929202783621553421958533761123653824135472378133765236115

    rsa = RSA.construct((n, e, d, p, q))

    with open("flag.txt", "rb") as flag_file:
        encrypted_flag = int.from_bytes(flag_file.read(), "little")

    decrypted_flag = rsa.decrypt(encrypted_flag).decode()

    return decrypted_flag


if __name__ == '__main__':
    flag = decrypt_flag()
    print("Decrypted Flag:", flag)

