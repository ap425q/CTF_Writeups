def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Given prime numbers p and q
p = 151974537061323957822386073908385085419559026351164685426097479266890291010147521691623222013307654711435195917538910433499461592808140930995554881397135856676650008657702221890681556382541341154333619026995004346614954741516470916984007797447848200982844325683748644670322174197570545222141895743221967042369
q = 174984645401233071825665708002522121612485226530706132712010887487642973021704769474826989160974464933559818767568944237124745165979610355867977190192654030573049063822083356316183080709550520634370714336131664619311165756257899116089875225537979520325826655873483634761961805768588413832262117172840398661229
n = p*q
# Calculate phi(n)
phi_n = (p - 1) * (q - 1)

# Find all possible six-digit values of e
min_e = 100000
max_e = 999999
possible_e_values = [e for e in range(min_e, max_e + 1) if gcd(e, phi_n) == 1]

# Print the list of possible six-digit e values
print("Possible six-digit values of e:", len(possible_e_values))


encrypted_message_int = 13798492512038760070176175279601263544116956273815547670915057561532348462120753731852024424193899030774938204962799194756105401464136384387458651343975594539877218889319074841918281784494580079814736461158750759327630935335333130007375268812456855987866715978531148043248418247223808114476698088473278808360178546541128684643502788861786419871174570376835894025839847919827231356213726961581598139013383568524808876923469958771740011288404737208217659897319372970291073214528581692244433371304465252501970552162445326313782129351056851978201181794212716520630569898498364053054452320641433167009005762663177324539460


def check_uoftctf(decrypted_text):
    return "uoftctf" in decrypted_text

# Decrypt the message for each possible e
for e in possible_e_values:
    # Decrypting the message: m = c^d mod n
    d = pow(e, -1, (p-1)*(q-1))  # Private exponent
    decrypted_message_int = pow(encrypted_message_int, d, n)

    # Convert the decrypted message to bytes
    decrypted_message_bytes = decrypted_message_int.to_bytes((decrypted_message_int.bit_length() + 7) // 8, 'big')
    decrypted_message_text = decrypted_message_bytes.decode('latin-1')

    # Check if "uoftctf" is present and print
    if check_uoftctf(decrypted_message_text):
        print(f"For e = {e}, Decrypted Message: {decrypted_message_text}")
