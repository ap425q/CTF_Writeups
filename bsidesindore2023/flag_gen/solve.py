def decrypt(n):
    key = [
        (n >> 40) & 0xFF,
        (n >> 32) & 0xFF,
        (n >> 24) & 0xFF,
        (n >> 16) & 0xFF,
        (n >> 8) & 0xFF,
        n & 0xFF
    ]

    flag = []
    for i in range(len(ct)):
        flag.append(chr(ct[i] ^ key[i % 6]))
        print(flag)

    return ''.join(flag)

# Provide the values of `val` and `ct` arrays here
val = [
    0x3, 0x9, 0x2, 0x9, 0x8, 0x6, 0x9, 0x7, 0x7, 0x4, 0x0, 0x2, 0x2, 0x8, 0x9, 0x3, 0x2, 0x8, 0x1,
    0x6, 0x0, 0x6, 0x3, 0x2, 0x5, 0x7, 0x4, 0x9, 0x0, 0x3, 0x7, 0x1, 0x0, 0x3, 0x5, 0x9, 0x1, 0x4,
    0x6, 0x8, 0x5, 0x0, 0x7, 0x1, 0x8, 0x8, 0x1, 0x3, 0x9, 0x2, 0x5, 0x2, 0x7, 0x0, 0x9, 0x8, 0x3,
    0x7, 0x3, 0x0, 0x6, 0x2, 0x0, 0x5, 0x3, 0x6, 0x7, 0x6, 0x3, 0x6, 0x1, 0x1, 0x5, 0x5, 0x9, 0x6,
    0x3, 0x0, 0x3, 0x9, 0x1, 0x7, 0x0, 0x4, 0x7, 0x1, 0x2, 0x4, 0x4, 0x2, 0x1, 0x4, 0x7, 0x8, 0x6,
    0x6, 0x4, 0x1, 0x9, 0x5, 0x4, 0x3, 0x4, 0x4, 0x2, 0x9, 0x1, 0x9, 0x4, 0x0, 0x3, 0x7, 0x8, 0x3,
    0x3, 0x3, 0x1, 0x5, 0x9, 0x5, 0x4, 0x3, 0x2, 0x0, 0x8, 0x4, 0x4, 0x8, 0x2, 0x1, 0x9, 0x8, 0x1,
    0x6, 0x9, 0x6, 0x2, 0x0, 0x9, 0x4, 0x8, 0x9, 0x8, 0x9, 0x2, 0x5, 0x8, 0x6, 0x5, 0x4, 0x0, 0x2,
    0x0, 0x7, 0x4, 0x4, 0x4, 0x3, 0x9, 0x8, 0x3, 0x5, 0x7, 0x3, 0x7, 0x9, 0x5, 0x0, 0x2, 0x2, 0x3,
    0x4, 0x6, 0x5, 0x9, 0x9, 0x7, 0x6, 0x8, 0x8, 0x5, 0x7, 0x6, 0x7, 0x3, 0x9, 0x2, 0x0, 0x7, 0x2,
    0x5, 0x3, 0x2, 0x1, 0x5, 0x3, 0x7, 0x1, 0x8, 0x8, 0x2, 0x2, 0x2, 0x6, 0x9, 0x0, 0x4, 0x8, 0x4,
    0x4, 0x0, 0x0, 0x3, 0x1, 0x9, 0x4, 0x2, 0x2, 0x5, 0x2, 0x0, 0x2, 0x4, 0x7, 0x6
]
ct = [
    0x7d, 0x9c, 0x73, 0xb4, 0x0c, 0x8e, 0x4e, 0x99, 0x71, 0xe0, 0x0b, 0x9e, 0x63, 0xd8, 0x75, 0xef,
    0x50, 0xa3, 0x20, 0xde, 0x42, 0xf4, 0x4d, 0x8c, 0x22, 0xdf, 0x42, 0xe1, 0x4d, 0x92, 0x30, 0x8c,
    0x3c
]

def sub_matrix(n, m, M, I, J):
    a = 0
    b = 0
    for i in range(n):
        if i != I:
            b = 0
            for j in range(m):
                if j != J:
                    M[a][b] = M[i][j]
                    b += 1
            a += 1

def det(m, M):
    if len(M) == 1:
        return M[0][0]
    else:
        r = 0
        for c in range(m):
            C = [[0] * m for _ in range(m - 1)]
            sub_matrix(m, m, M, 0, c)
            r += ((-1) ** c) * M[0][c] * det(m - 1, C)
        return r

def decrypt_flag():
    det_val = det(3, [[val[0], val[1], val[2]], [val[3], val[4], val[5]], [val[6], val[7], val[8]]])
    n = 31337
    while True:
        if det_val * n % 31337 == 1:
            break
        n += 31337
    return decrypt(n)

flag = decrypt_flag()
print(flag)
