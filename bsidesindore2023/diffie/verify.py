from Crypto.Util.number import *

# Given values
p = 177570430264404042586947209415361175829662877465021738163452003044204801236884005980142784114098378718171232421758262680024168974955507208327903586791589504974287563947107311706980541752128561476280897335081377540882450802053121704994636737618193754484639531123445136371629051163053932580571940280678765406507
a = 43956506117080063425552748919558963635605098605326775979012360863142443520592114771800350897421485025125720482734237579881628822814442838128036568093867197695237846018696049279357474258871874227658474923562729861151927356523476281314556495465881999078214836635672825087229897489780543610449600598310975845972
b = 174696548246270768822111154128350984851623375416115231737870633294112190977226571494266879050596220994493007232484609234595354342745045435123046789963360269847186352233769676144998148572751650872487364118516515673999802276136983028240521720649825627376559451556059366974145722267864743175103312487712498074749
B = 26467203262894711969159457169326125007000815712021405657352754729857627693311672965448787149024723113418146398326650495992712486220869311766554396353531102926524277200284073965641737905200427505698807999274743916487363108331073718034682818342814978156028844309220276666373635341609073539725142950450555754476
s = 12434113186075391543764483911407788417903733970619704242876093325272607987251561194578833768854877839420807906348010197072863684238585629167767699669787141090172275735228322001099182693707345110444778401752303810786206722286874416348628222046081716777562273093345200683040455119310424421838556869940942435673

# Extended Euclidean Algorithm to compute modular inverse
def mod_inverse(a, m):
    g, x, y = extended_gcd(a, m)
    if g != 1:
        raise ValueError("Modular inverse does not exist.")
    return x % m

# Reverse the compose_f function
def reverse_compose_f(z, n):
    for _ in range(n):
        z = pow(z, mod_inverse(a, p), p)
        z = (z - b) % p
        print(z)
    return z

# Find nb using reverse_compose_f
nb = reverse_compose_f(B, s)

# Print the result
print("nb:", nb)
